% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_glm_forest.R
\name{plot_glm_forest}
\alias{plot_glm_forest}
\title{GLM Forest Plot.}
\usage{
plot_glm_forest(
  these_predictions = NULL,
  these_samples_metadata = NULL,
  this_glm = NULL,
  plot_title = "My Plot",
  all_subs = FALSE,
  subtype_class = "5_class",
  categorical_factor = NULL,
  predictor_columns = NULL,
  this_subtype = NULL,
  sample_id_col = NULL,
  row_to_col = FALSE,
  out_path = NULL,
  out_format = "png",
  plot_width = 8,
  plot_height = 8,
  return_data = FALSE
)
}
\arguments{
\item{these_predictions}{Required parameter if \code{this_glm} is not provided. Should be output from
\code{\link[=lundtax_predict_sub]{lundtax_predict_sub()}}.}

\item{these_samples_metadata}{Required parameter if \code{this_glm}is not provided. Metadata associated
with he prediction output. Also possible for the user to provide a metadata subset with samples
of interest, the return will be restricted to the samples within the specified group}

\item{this_glm}{Required parameter if \code{these_predictions} and \code{these_samples_metadata} is not
provided (The output from \code{get_glm_scores}).}

\item{plot_title}{Title for plot.}

\item{all_subs}{Boolean, default is FALSE. Set to TRUE to return a forest plot for all subtypes
within the specified class (\code{subtype_class}).}

\item{subtype_class}{Can be one of the following; 5_class or 7_class. Default is 5_class.}

\item{categorical_factor}{Required parameter if \code{this_glm}is not provided. This should be the categorical
variable that is intended for testing. In addition, this should also be a variable of type factor,
with exactly 2 levels.}

\item{predictor_columns}{Optional, should be a vector with column names, either from the provided
metadata or signature score object, to be tested for. If not provided, the function will subset
data to the signature scores returned with \code{lundtax_predict_sub}.}

\item{this_subtype}{Optional Specify subtype of interest. Leave as NULL to not separate statistics on subtype.}

\item{sample_id_col}{Optional parameter. Allows the suer to manually specify the name of a column with sample ID.}

\item{row_to_col}{Optional parameter, set to TRUE to convert rownames in metadata to a new column
called sample_id. Default is FALSE.}

\item{out_path}{Optional, set path to export plot.}

\item{out_format}{Required parameter if \code{out_path} is specified. Can be "png" (default) or "pdf".
The user can further specify the dimensions of the returned plot with \code{plot_width} and \code{plot_height}.}

\item{plot_width}{This parameter controls the width in inches.  Default is 8 (2400 pixels at 300 PPI).}

\item{plot_height}{This parameter controls the height in inches. Default is 8 (2400 pixels at 300 PPI).}

\item{return_data}{Boolean parameter, set to TRUE and return the formatted data used for plotting.
Default is FALSE}
}
\value{
A forest plot as grub object.
}
\description{
Construct a forest plot using GLM data for a set of signature scores.
}
\details{
This function internally calls \code{get_glm_scores}, which internally calls \code{int_prediction_wrangler}.
This happens if the user does not call the plotting function using the \code{this_glm} parameter.
Many of the parameters in this function are recycled in the internal function calls to improve
user flexibility. It's possible to return a forest plot for all subtypes within the specified
\code{subtype_class}. To do so, set \code{all_subs = TRUE}. This will trigger a loop for which \code{get_glm_scores}
is internally called for each subtype. To return a plot for just one subtype, set \code{all_subs = FALSE}
and specify the subtype and class with \code{this_subtype} and \code{subtype_class}. To return a plot for more
than one subtype, but not all, call get_glm_score for each iteration of subtypes, see last example
in the docs.
}
\examples{
#load pacakges
library(dplyr, ggplot2)

#get prediction calls
sjodahl_predicted = lundtax_predict_sub(this_data = sjodahl_2017, 
                                        impute = TRUE)

#build plot                                        
plot_glm_forest(these_predictions = sjodahl_predicted,
                these_samples_metadata = sjodahl_2017_meta,
                plot_title = "Uro, adj_chemo",
                all_subs = FALSE,
                subtype_class = "5_class", 
                this_subtype = "Uro",
                categorical_factor = "adj_chemo")

}
